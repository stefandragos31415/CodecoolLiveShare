{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Stefan\\\\Desktop\\\\CODECOOL\\\\CodecoolLiveShare\\\\ReactApp\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport \"./App.css\";\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport Article from \"./components/Article\";\nimport Pagination from \"./components/Pagination\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const URL = \"http://apps.loopevo.com/apis/posts/posts.php\";\n  const [articles, setArticles] = useState([]);\n  const [pageData, setPageData] = useState([]);\n  const [currentPage, setCurrentPage] = useState(0);\n  const articlesPerPage = 10;\n  const [pages, setPages] = useState([]);\n  const [articleId, setArticleId] = useState(null); // la incarcarea paginii, luam datele din URL si le afisam\n\n  useEffect(() => {\n    getPosts();\n  }, []); // se apeleaza atunci cand schimbam pagina\n\n  useEffect(() => {\n    calculatePageData(articles);\n  }, [currentPage]);\n\n  const getPosts = () => {\n    axios.get(URL).then(response => {\n      setArticles(response.data); // trimitem response.data din API (datele primite)\n\n      calculatePageData(response.data);\n      setPages(createPages(response.data));\n    }).catch(() => {\n      console.log(\"error\");\n    });\n  };\n\n  const getPost = postId => {\n    axios.post(\"http://apps.loopevo.com/apis/posts/post.php\", {\n      id: postId\n    }).then(response => {}).catch(() => {\n      console.log(\"error\");\n    });\n  }; // calculam indexul de start si indexul de final\n\n\n  const calculatePageData = articlesData => {\n    let startIndex = currentPage * articlesPerPage; // 0 * 10 => 0 reprezinta primul articol pe care vrem sa il afisam\n\n    let finalIndex = startIndex + articlesPerPage; // 0 + 10 => reprezinta ultimul articol pe care vrem sa il afisam\n\n    const filteredArticles = articlesData.slice(startIndex, finalIndex);\n    setPageData(filteredArticles);\n  };\n\n  const changePage = page => {\n    setCurrentPage(page);\n    console.log(pageData);\n  };\n\n  const nextPage = () => {\n    if (currentPage < pages.length) {\n      setCurrentPage(currentPage + 1);\n    }\n  };\n\n  const prevPage = () => {\n    if (currentPage >= 1) {\n      setCurrentPage(currentPage - 1);\n    }\n  };\n\n  const createPages = articlesData => {\n    const numberPages = Math.ceil(articlesData.length / articlesPerPage);\n    return Array(numberPages).fill(\"\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Articles Content Management System\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"articles\",\n      children: pageData.map((article, index) => /*#__PURE__*/_jsxDEV(Article, {\n        title: article.title\n      }, article.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 6\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      data: pages,\n      change: changePage,\n      next: nextPage,\n      prev: prevPage,\n      currentPage: currentPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"I/1Q3iiDCJEgy7kk5YmWZFohIg8=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Stefan/Desktop/CODECOOL/CodecoolLiveShare/ReactApp/src/App.js"],"names":["axios","React","useEffect","useState","Article","Pagination","App","URL","articles","setArticles","pageData","setPageData","currentPage","setCurrentPage","articlesPerPage","pages","setPages","articleId","setArticleId","getPosts","calculatePageData","get","then","response","data","createPages","catch","console","log","getPost","postId","post","id","articlesData","startIndex","finalIndex","filteredArticles","slice","changePage","page","nextPage","length","prevPage","numberPages","Math","ceil","Array","fill","map","article","index","title"],"mappings":";;;AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACd,QAAMC,GAAG,GAAG,8CAAZ;AAEA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACS,WAAD,EAAcC,cAAd,IAAgCV,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAMW,eAAe,GAAG,EAAxB;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,IAAD,CAA1C,CARc,CAUd;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACfiB,IAAAA,QAAQ;AACR,GAFQ,EAEN,EAFM,CAAT,CAXc,CAed;;AACAjB,EAAAA,SAAS,CAAC,MAAM;AACfkB,IAAAA,iBAAiB,CAACZ,QAAD,CAAjB;AACA,GAFQ,EAEN,CAACI,WAAD,CAFM,CAAT;;AAIA,QAAMO,QAAQ,GAAG,MAAM;AACtBnB,IAAAA,KAAK,CACHqB,GADF,CACMd,GADN,EAEEe,IAFF,CAEQC,QAAD,IAAc;AACnBd,MAAAA,WAAW,CAACc,QAAQ,CAACC,IAAV,CAAX,CADmB,CAGnB;;AACAJ,MAAAA,iBAAiB,CAACG,QAAQ,CAACC,IAAV,CAAjB;AACAR,MAAAA,QAAQ,CAACS,WAAW,CAACF,QAAQ,CAACC,IAAV,CAAZ,CAAR;AACA,KARF,EASEE,KATF,CASQ,MAAM;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,KAXF;AAYA,GAbD;;AAeA,QAAMC,OAAO,GAAIC,MAAD,IAAY;AAC3B9B,IAAAA,KAAK,CACH+B,IADF,CACO,6CADP,EACsD;AACpDC,MAAAA,EAAE,EAAEF;AADgD,KADtD,EAIER,IAJF,CAIQC,QAAD,IAAc,CAAE,CAJvB,EAKEG,KALF,CAKQ,MAAM;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACA,KAPF;AAQA,GATD,CAnCc,CA8Cd;;;AACA,QAAMR,iBAAiB,GAAIa,YAAD,IAAkB;AAC3C,QAAIC,UAAU,GAAGtB,WAAW,GAAGE,eAA/B,CAD2C,CACK;;AAChD,QAAIqB,UAAU,GAAGD,UAAU,GAAGpB,eAA9B,CAF2C,CAEI;;AAE/C,UAAMsB,gBAAgB,GAAGH,YAAY,CAACI,KAAb,CAAmBH,UAAnB,EAA+BC,UAA/B,CAAzB;AACAxB,IAAAA,WAAW,CAACyB,gBAAD,CAAX;AACA,GAND;;AAQA,QAAME,UAAU,GAAIC,IAAD,IAAU;AAC5B1B,IAAAA,cAAc,CAAC0B,IAAD,CAAd;AACAZ,IAAAA,OAAO,CAACC,GAAR,CAAYlB,QAAZ;AACA,GAHD;;AAKA,QAAM8B,QAAQ,GAAG,MAAM;AACtB,QAAI5B,WAAW,GAAGG,KAAK,CAAC0B,MAAxB,EAAgC;AAC/B5B,MAAAA,cAAc,CAACD,WAAW,GAAG,CAAf,CAAd;AACA;AACD,GAJD;;AAMA,QAAM8B,QAAQ,GAAG,MAAM;AACtB,QAAI9B,WAAW,IAAI,CAAnB,EAAsB;AACrBC,MAAAA,cAAc,CAACD,WAAW,GAAG,CAAf,CAAd;AACA;AACD,GAJD;;AAMA,QAAMa,WAAW,GAAIQ,YAAD,IAAkB;AACrC,UAAMU,WAAW,GAAGC,IAAI,CAACC,IAAL,CAAUZ,YAAY,CAACQ,MAAb,GAAsB3B,eAAhC,CAApB;AACA,WAAOgC,KAAK,CAACH,WAAD,CAAL,CAAmBI,IAAnB,CAAwB,EAAxB,CAAP;AACA,GAHD;;AAKA,sBACC;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,4BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,gBACErC,QAAQ,CAACsC,GAAT,CAAa,CAACC,OAAD,EAAUC,KAAV,kBACb,QAAC,OAAD;AAA0B,QAAA,KAAK,EAAED,OAAO,CAACE;AAAzC,SAAcF,OAAO,CAACjB,EAAtB;AAAA;AAAA;AAAA;AAAA,cADA;AADF;AAAA;AAAA;AAAA;AAAA,YAFD,eAQC,QAAC,UAAD;AAAY,MAAA,IAAI,EAAEjB,KAAlB;AAAyB,MAAA,MAAM,EAAEuB,UAAjC;AAA6C,MAAA,IAAI,EAAEE,QAAnD;AAA6D,MAAA,IAAI,EAAEE,QAAnE;AAA6E,MAAA,WAAW,EAAE9B;AAA1F;AAAA;AAAA;AAAA;AAAA,YARD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAYA;;GAzFQN,G;;KAAAA,G;AA2FT,eAAeA,GAAf","sourcesContent":["import \"./App.css\";\nimport axios from \"axios\";\nimport React, { useEffect, useState } from \"react\";\nimport Article from \"./components/Article\";\nimport Pagination from \"./components/Pagination\";\n\nfunction App() {\n\tconst URL = \"http://apps.loopevo.com/apis/posts/posts.php\";\n\n\tconst [articles, setArticles] = useState([]);\n\tconst [pageData, setPageData] = useState([]);\n\tconst [currentPage, setCurrentPage] = useState(0);\n\tconst articlesPerPage = 10;\n\tconst [pages, setPages] = useState([]);\n\tconst [articleId, setArticleId] = useState(null);\n\n\t// la incarcarea paginii, luam datele din URL si le afisam\n\tuseEffect(() => {\n\t\tgetPosts();\n\t}, []);\n\n\t// se apeleaza atunci cand schimbam pagina\n\tuseEffect(() => {\n\t\tcalculatePageData(articles);\n\t}, [currentPage]);\n\n\tconst getPosts = () => {\n\t\taxios\n\t\t\t.get(URL)\n\t\t\t.then((response) => {\n\t\t\t\tsetArticles(response.data);\n\n\t\t\t\t// trimitem response.data din API (datele primite)\n\t\t\t\tcalculatePageData(response.data);\n\t\t\t\tsetPages(createPages(response.data));\n\t\t\t})\n\t\t\t.catch(() => {\n\t\t\t\tconsole.log(\"error\");\n\t\t\t});\n\t};\n\n\tconst getPost = (postId) => {\n\t\taxios\n\t\t\t.post(\"http://apps.loopevo.com/apis/posts/post.php\", {\n\t\t\t\tid: postId,\n\t\t\t})\n\t\t\t.then((response) => {})\n\t\t\t.catch(() => {\n\t\t\t\tconsole.log(\"error\");\n\t\t\t});\n\t};\n\n\t// calculam indexul de start si indexul de final\n\tconst calculatePageData = (articlesData) => {\n\t\tlet startIndex = currentPage * articlesPerPage; // 0 * 10 => 0 reprezinta primul articol pe care vrem sa il afisam\n\t\tlet finalIndex = startIndex + articlesPerPage; // 0 + 10 => reprezinta ultimul articol pe care vrem sa il afisam\n\n\t\tconst filteredArticles = articlesData.slice(startIndex, finalIndex);\n\t\tsetPageData(filteredArticles);\n\t};\n\n\tconst changePage = (page) => {\n\t\tsetCurrentPage(page);\n\t\tconsole.log(pageData);\n\t};\n\n\tconst nextPage = () => {\n\t\tif (currentPage < pages.length) {\n\t\t\tsetCurrentPage(currentPage + 1);\n\t\t}\n\t};\n\n\tconst prevPage = () => {\n\t\tif (currentPage >= 1) {\n\t\t\tsetCurrentPage(currentPage - 1);\n\t\t}\n\t};\n\n\tconst createPages = (articlesData) => {\n\t\tconst numberPages = Math.ceil(articlesData.length / articlesPerPage);\n\t\treturn Array(numberPages).fill(\"\");\n\t};\n\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<h1>Articles Content Management System</h1>\n\t\t\t<div className=\"articles\">\n\t\t\t\t{pageData.map((article, index) => (\n\t\t\t\t\t<Article key={article.id} title={article.title} />\n\t\t\t\t))}\n\t\t\t</div>\n\n\t\t\t<Pagination data={pages} change={changePage} next={nextPage} prev={prevPage} currentPage={currentPage} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}
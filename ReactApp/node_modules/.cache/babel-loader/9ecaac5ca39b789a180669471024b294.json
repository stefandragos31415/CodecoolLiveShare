{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Stefan\\\\Desktop\\\\CODECOOL\\\\CodecoolLiveShare\\\\ReactApp\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [item, setItem] = useState(\"\");\n  const [items, setItems] = useState([]);\n  const [currentIndex, setCurrentIndex] = useState(null);\n  const inputRef = useRef(null);\n\n  const addItem = function (e) {\n    e.preventDefault(); // prevents page refresh when button clicked (becasue it is in a form)\n\n    if (currentIndex !== null) {\n      // true when we edit an existing element from the items list\n      const arr = [...items]; // create new array to re-render the App\n\n      arr[currentIndex] = item; // modifies the element with the selected index\n\n      setItems(arr); // update list of items with edit and re-render\n    } else {\n      // true when adding a new element to the items list\n      setItems([...items, item]); // update list of items without edit and re-render\n    }\n\n    setCurrentIndex(null); // resets index after ed it\n\n    setItem(\"\"); // erases item from input field\n\n    inputRef.current.focus(); // keeps focus on input field\n  };\n\n  const edit = function (index) {\n    setItem(items[index]); // selects the current item based on the selected index (click)\n\n    setCurrentIndex(index); // udates the curent index function of the selected element from ul list\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"To do list\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: inputRef,\n        type: \"text\",\n        value: item,\n        onChange: e => setItem(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: e => addItem(e),\n        children: \"Add me\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 5\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: items.map((element, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          onClick: () => edit(index),\n          children: element\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 7\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"SDzM0iOm6VTav2kuupyGXw4dj8c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/Stefan/Desktop/CODECOOL/CodecoolLiveShare/ReactApp/src/App.js"],"names":["React","useState","useRef","App","item","setItem","items","setItems","currentIndex","setCurrentIndex","inputRef","addItem","e","preventDefault","arr","current","focus","edit","index","target","value","map","element"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,OAAO,WAAP;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACd,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBJ,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACK,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCR,QAAQ,CAAC,IAAD,CAAhD;AAEA,QAAMS,QAAQ,GAAGR,MAAM,CAAC,IAAD,CAAvB;;AACA,QAAMS,OAAO,GAAG,UAAUC,CAAV,EAAa;AAC5BA,IAAAA,CAAC,CAACC,cAAF,GAD4B,CACR;;AACpB,QAAIL,YAAY,KAAK,IAArB,EAA2B;AAC1B;AACA,YAAMM,GAAG,GAAG,CAAC,GAAGR,KAAJ,CAAZ,CAF0B,CAEF;;AACxBQ,MAAAA,GAAG,CAACN,YAAD,CAAH,GAAoBJ,IAApB,CAH0B,CAGA;;AAC1BG,MAAAA,QAAQ,CAACO,GAAD,CAAR,CAJ0B,CAIX;AACf,KALD,MAKO;AACN;AACAP,MAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWF,IAAX,CAAD,CAAR,CAFM,CAEsB;AAC5B;;AACDK,IAAAA,eAAe,CAAC,IAAD,CAAf,CAX4B,CAWL;;AACvBJ,IAAAA,OAAO,CAAC,EAAD,CAAP,CAZ4B,CAYf;;AACbK,IAAAA,QAAQ,CAACK,OAAT,CAAiBC,KAAjB,GAb4B,CAaF;AAC1B,GAdD;;AAgBA,QAAMC,IAAI,GAAG,UAAUC,KAAV,EAAiB;AAC7Bb,IAAAA,OAAO,CAACC,KAAK,CAACY,KAAD,CAAN,CAAP,CAD6B,CACN;;AACvBT,IAAAA,eAAe,CAACS,KAAD,CAAf,CAF6B,CAEL;AACxB,GAHD;;AAKA,sBACC;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA,2BACC;AAAA,8BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,eAEC;AAAO,QAAA,GAAG,EAAER,QAAZ;AAAsB,QAAA,IAAI,EAAC,MAA3B;AAAkC,QAAA,KAAK,EAAEN,IAAzC;AAA+C,QAAA,QAAQ,EAAGQ,CAAD,IAAOP,OAAO,CAACO,CAAC,CAACO,MAAF,CAASC,KAAV;AAAvE;AAAA;AAAA;AAAA;AAAA,cAFD,eAGC;AAAQ,QAAA,OAAO,EAAGR,CAAD,IAAOD,OAAO,CAACC,CAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHD,oBAIC;AAAA,kBACEN,KAAK,CAACe,GAAN,CAAU,CAACC,OAAD,EAAUJ,KAAV,kBACV;AAAI,UAAA,OAAO,EAAE,MAAMD,IAAI,CAACC,KAAD,CAAvB;AAAA,oBACEI;AADF,WAAqCJ,KAArC;AAAA;AAAA;AAAA;AAAA,gBADA;AADF;AAAA;AAAA;AAAA;AAAA,cAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAgBA;;GA3CQf,G;;KAAAA,G;AA6CT,eAAeA,GAAf","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n\tconst [item, setItem] = useState(\"\");\n\tconst [items, setItems] = useState([]);\n\tconst [currentIndex, setCurrentIndex] = useState(null);\n\n\tconst inputRef = useRef(null);\n\tconst addItem = function (e) {\n\t\te.preventDefault(); // prevents page refresh when button clicked (becasue it is in a form)\n\t\tif (currentIndex !== null) {\n\t\t\t// true when we edit an existing element from the items list\n\t\t\tconst arr = [...items]; // create new array to re-render the App\n\t\t\tarr[currentIndex] = item; // modifies the element with the selected index\n\t\t\tsetItems(arr); // update list of items with edit and re-render\n\t\t} else {\n\t\t\t// true when adding a new element to the items list\n\t\t\tsetItems([...items, item]); // update list of items without edit and re-render\n\t\t}\n\t\tsetCurrentIndex(null); // resets index after ed it\n\t\tsetItem(\"\"); // erases item from input field\n\t\tinputRef.current.focus(); // keeps focus on input field\n\t};\n\n\tconst edit = function (index) {\n\t\tsetItem(items[index]); // selects the current item based on the selected index (click)\n\t\tsetCurrentIndex(index); // udates the curent index function of the selected element from ul list\n\t};\n\n\treturn (\n\t\t<div className=\"container\">\n\t\t\t<form>\n\t\t\t\t<label>To do list</label>\n\t\t\t\t<input ref={inputRef} type=\"text\" value={item} onChange={(e) => setItem(e.target.value)}></input>\n\t\t\t\t<button onClick={(e) => addItem(e)}>Add me</button> {/* (e) is needed for .preventDefault() */}\n\t\t\t\t<ul>\n\t\t\t\t\t{items.map((element, index) => (\n\t\t\t\t\t\t<li onClick={() => edit(index)} key={index}>\n\t\t\t\t\t\t\t{element}\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t</form>\n\t\t</div>\n\t);\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}